{"version":3,"file":"static/js/main.bd257ee5.js","mappings":"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","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/mat4.js","shaders.js","scene.js","perfume.js","bookshelf.js","floor.js","index.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","export function createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error('Shader compilation error:', gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n    }\n    return shader;\n}\n\nexport function createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error('Program linking error:', gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n        return null;\n    }\n    return program;\n}\n\nexport const vertexShaderSource = `\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjMatrix;\n\nvarying vec3 vNormal;\nvarying vec3 vPosition;\nvarying vec2 vTexCoord;\nvarying vec3 vOriginalPosition;\n\nvoid main() {\n    vNormal = mat3(uModelMatrix) * aNormal;\n    vec4 worldPos = uModelMatrix * vec4(aPosition, 1.0);\n    vPosition = worldPos.xyz;\n    vTexCoord = aTexCoord;\n    vOriginalPosition = aPosition;\n    gl_Position = uProjMatrix * uViewMatrix * worldPos;\n}`;\n\nexport const fragmentShaderSource = `\nprecision highp float;\n\nvarying vec3 vNormal;\nvarying vec3 vPosition;\nvarying vec2 vTexCoord;\nvarying vec3 vOriginalPosition;\n\nuniform vec3 uLightPos;\nuniform vec3 uViewPos;\nuniform vec4 uBaseColor;\nuniform sampler2D uTexture;\nuniform bool uUseTexture;\n\nvoid main() {\n    vec3 normal = normalize(vNormal);\n    vec3 lightDir = normalize(uLightPos - vPosition);\n    vec3 viewDir = normalize(uViewPos - vPosition);\n    vec3 halfDir = normalize(lightDir + viewDir);\n\n    // Enhanced lighting model\n    float ambient = 0.2;\n    float diffuse = max(dot(normal, lightDir), 0.0);\n    float specular = pow(max(dot(normal, halfDir), 0.0), 64.0);\n    float fresnel = pow(1.0 - max(dot(normal, viewDir), 0.0), 4.0);\n\n    vec4 baseColor = uUseTexture ? texture2D(uTexture, vTexCoord) : uBaseColor;\n    \n    // Add subtle gradient based on height for the bookshelf\n    float heightGradient = (vOriginalPosition.y + 1.0) * 0.1;\n    baseColor.rgb += heightGradient;\n\n    // Combine lighting components\n    vec3 color = baseColor.rgb * (ambient + diffuse) + \n                 vec3(1.0) * specular * baseColor.a +\n                 vec3(0.5, 0.7, 1.0) * fresnel * baseColor.a;\n\n    gl_FragColor = vec4(color, baseColor.a);\n}`;","import { mat4, vec3 } from 'gl-matrix';\nimport { createShader, createProgram, vertexShaderSource, fragmentShaderSource } from './shaders.js';\n\nexport class Scene {\n    constructor(gl) {\n        this.gl = gl;\n        this.models = [];\n        this.camera = {\n            position: vec3.fromValues(0, 2, 5),\n            target: vec3.fromValues(0, 0, 0),\n            up: vec3.fromValues(0, 1, 0),\n            rotation: {\n                x: 0,\n                y: 0\n            }\n        };\n        this.mouseDown = false;\n        this.lastMousePos = { x: 0, y: 0 };\n        this.setupGL();\n        this.initShaders();\n        this.setupMouseControls();\n    }\n\n    setupMouseControls() {\n        const canvas = this.gl.canvas;\n\n        canvas.addEventListener('mousedown', (e) => {\n            e.preventDefault();\n            this.mouseDown = true;\n            this.lastMousePos = {\n                x: e.clientX,\n                y: e.clientY\n            };\n        });\n\n        window.addEventListener('mouseup', () => {\n            this.mouseDown = false;\n        });\n\n        window.addEventListener('mousemove', (e) => {\n            if (!this.mouseDown) return;\n\n            const deltaX = e.clientX - this.lastMousePos.x;\n            const deltaY = e.clientY - this.lastMousePos.y;\n\n            this.camera.rotation.y += deltaX * 0.005;\n            this.camera.rotation.x = Math.max(-Math.PI/3, Math.min(Math.PI/3, \n                this.camera.rotation.x + deltaY * 0.005));\n\n            this.updateCameraPosition();\n            \n            this.lastMousePos = {\n                x: e.clientX,\n                y: e.clientY\n            };\n        });\n\n        canvas.addEventListener('wheel', (e) => {\n            e.preventDefault();\n            const zoomSpeed = 0.001;\n            const zoom = e.deltaY * zoomSpeed;\n            const direction = vec3.create();\n            vec3.subtract(direction, this.camera.position, this.camera.target);\n            \n            // Limit zoom range\n            const currentDistance = vec3.length(direction);\n            const newDistance = currentDistance * (1 + zoom);\n            if (newDistance > 2 && newDistance < 10) {\n                vec3.scale(direction, direction, 1 + zoom);\n                vec3.add(this.camera.position, this.camera.target, direction);\n            }\n        });\n    }\n\n    updateCameraPosition() {\n        const radius = vec3.length(vec3.subtract(vec3.create(), \n            this.camera.position, this.camera.target));\n        \n        this.camera.position[0] = this.camera.target[0] + radius * \n            Math.sin(this.camera.rotation.y) * Math.cos(this.camera.rotation.x);\n        this.camera.position[1] = this.camera.target[1] + radius * \n            Math.sin(this.camera.rotation.x);\n        this.camera.position[2] = this.camera.target[2] + radius * \n            Math.cos(this.camera.rotation.y) * Math.cos(this.camera.rotation.x);\n    }\n\n    setupGL() {\n        const gl = this.gl;\n        gl.enable(gl.DEPTH_TEST);\n        gl.enable(gl.CULL_FACE);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n        gl.clearColor(0.9, 0.9, 0.9, 1.0);\n        this.resizeCanvas();\n        window.addEventListener('resize', () => this.resizeCanvas());\n    }\n\n    resizeCanvas() {\n        const canvas = this.gl.canvas;\n        const displayWidth = canvas.clientWidth;\n        const displayHeight = canvas.clientHeight;\n\n        if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n            canvas.width = displayWidth;\n            canvas.height = displayHeight;\n            this.gl.viewport(0, 0, canvas.width, canvas.height);\n        }\n    }\n\n    initShaders() {\n        const gl = this.gl;\n        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n        this.program = createProgram(gl, vertexShader, fragmentShader);\n        \n        this.locations = {\n            attributes: {\n                position: gl.getAttribLocation(this.program, 'aPosition'),\n                normal: gl.getAttribLocation(this.program, 'aNormal'),\n                texCoord: gl.getAttribLocation(this.program, 'aTexCoord')\n            },\n            uniforms: {\n                modelMatrix: gl.getUniformLocation(this.program, 'uModelMatrix'),\n                viewMatrix: gl.getUniformLocation(this.program, 'uViewMatrix'),\n                projMatrix: gl.getUniformLocation(this.program, 'uProjMatrix'),\n                lightPos: gl.getUniformLocation(this.program, 'uLightPos'),\n                viewPos: gl.getUniformLocation(this.program, 'uViewPos'),\n                baseColor: gl.getUniformLocation(this.program, 'uBaseColor'),\n                uTexture: gl.getUniformLocation(this.program, 'uTexture'),\n                uUseTexture: gl.getUniformLocation(this.program, 'uUseTexture')\n            }\n        };\n    }\n\n    addModel(model) {\n        model.setProgram(this.program, this.locations);\n        this.models.push(model);\n    }\n\n    render() {\n        const gl = this.gl;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        const viewMatrix = mat4.create();\n        const projMatrix = mat4.create();\n\n        mat4.lookAt(viewMatrix, this.camera.position, this.camera.target, this.camera.up);\n        mat4.perspective(projMatrix, 45 * Math.PI / 180, \n            gl.canvas.width / gl.canvas.height, 0.1, 100.0);\n\n        gl.useProgram(this.program);\n        gl.uniformMatrix4fv(this.locations.uniforms.viewMatrix, false, viewMatrix);\n        gl.uniformMatrix4fv(this.locations.uniforms.projMatrix, false, projMatrix);\n        gl.uniform3fv(this.locations.uniforms.lightPos, [5, 5, 5]);\n        gl.uniform3fv(this.locations.uniforms.viewPos, this.camera.position);\n\n        this.models.forEach(model => {\n            model.render();\n        });\n    }\n}\n\nexport function initScene(gl) {\n    return new Scene(gl);\n}","import { mat4 } from 'gl-matrix';\n\nexport class PerfumeBottle {\n    constructor(gl) {\n        this.gl = gl;\n        this.position = [0, 0, 0];\n        this.rotation = 0;\n        this.scale = [0.15, 0.15, 0.15]; // Reduced size\n        this.initBuffers();\n    }\n\n    initBuffers() {\n        const gl = this.gl;\n        const vertices = [];\n        const normals = [];\n        const indices = [];\n        \n        this.generateBottleGeometry(vertices, normals, indices);\n\n        this.vertexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n        this.normalBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);\n\n        this.indexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n        this.indexCount = indices.length;\n    }\n\n    generateBottleGeometry(vertices, normals, indices) {\n        const segments = 32;\n        \n        // More detailed perfume bottle profile (x, y coordinates)\n        const profile = [\n            // Base\n            [0.0, -1.0],    // Center bottom\n            [0.3, -0.95],   // Base edge\n            [0.35, -0.9],   // Base curve\n            // Main body\n            [0.45, -0.8],   // Lower body\n            [0.5, -0.6],    // Mid-lower body\n            [0.52, -0.4],   // Middle body\n            [0.52, -0.2],   // Mid-upper body\n            [0.5, 0.0],     // Upper body\n            [0.45, 0.1],    // Shoulder start\n            // Neck\n            [0.25, 0.2],    // Shoulder\n            [0.2, 0.3],     // Upper shoulder\n            [0.15, 0.4],    // Neck start\n            [0.12, 0.5],    // Neck middle\n            [0.15, 0.6],    // Neck top\n            // Cap\n            [0.2, 0.65],    // Cap base\n            [0.22, 0.7],    // Cap middle\n            [0.2, 0.8],     // Cap top\n            [0.18, 0.85],   // Cap edge\n            [0.0, 0.9]      // Cap center\n        ];\n\n        // Generate vertices and normals\n        for (let i = 0; i <= segments; i++) {\n            const theta = (i / segments) * Math.PI * 2;\n            const sinTheta = Math.sin(theta);\n            const cosTheta = Math.cos(theta);\n\n            for (let j = 0; j < profile.length; j++) {\n                const [radius, height] = profile[j];\n                const x = radius * cosTheta;\n                const z = radius * sinTheta;\n                const y = height;\n\n                // Vertex position\n                vertices.push(x, y, z);\n\n                // Calculate normal\n                let nx = cosTheta;\n                let nz = sinTheta;\n                let ny = 0;\n\n                // Adjust normals for different parts of the bottle\n                if (j < 3) { // Base\n                    ny = -0.5;\n                } else if (j < 8) { // Body\n                    ny = 0.1;\n                } else if (j < 14) { // Neck\n                    ny = 0.3;\n                } else { // Cap\n                    ny = 0.5;\n                }\n\n                const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n                normals.push(nx/length, ny/length, nz/length);\n            }\n        }\n\n        // Generate indices\n        for (let i = 0; i < segments; i++) {\n            for (let j = 0; j < profile.length - 1; j++) {\n                const current = i * profile.length + j;\n                const next = (i + 1) * profile.length + j;\n\n                indices.push(\n                    current, next, current + 1,\n                    next, next + 1, current + 1\n                );\n            }\n        }\n    }\n\n    setProgram(program, locations) {\n        this.program = program;\n        this.locations = locations;\n    }\n\n    render() {\n        const gl = this.gl;\n        \n        const modelMatrix = mat4.create();\n        mat4.translate(modelMatrix, modelMatrix, this.position);\n        mat4.rotate(modelMatrix, modelMatrix, this.rotation, [0, 1, 0]);\n        mat4.scale(modelMatrix, modelMatrix, this.scale);\n\n        gl.uniformMatrix4fv(this.locations.uniforms.modelMatrix, false, modelMatrix);\n        \n        // Enhanced glass material properties with a slight blue tint\n        gl.uniform1i(this.locations.uniforms.uUseTexture, 0);\n        gl.uniform4fv(this.locations.uniforms.baseColor, [0.8, 0.85, 1.0, 0.9]);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.vertexAttribPointer(this.locations.attributes.position, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(this.locations.attributes.position);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);\n        gl.vertexAttribPointer(this.locations.attributes.normal, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(this.locations.attributes.normal);\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.drawElements(gl.TRIANGLES, this.indexCount, gl.UNSIGNED_SHORT, 0);\n    }\n}\n\nexport function createPerfumeBottle(gl) {\n    return new PerfumeBottle(gl);\n}","import { mat4 } from 'gl-matrix';\n\nexport class Bookshelf {\n    constructor(gl) {\n        this.gl = gl;\n        this.position = [0, 0, -3];\n        this.rotation = 0;\n        this.scale = [1.5, 2, 0.8];\n        this.initBuffers();\n    }\n\n    initBuffers() {\n        const gl = this.gl;\n        const vertices = [];\n        const normals = [];\n        const indices = [];\n        \n        this.generateShelfGeometry(vertices, normals, indices);\n\n        this.vertexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n        this.normalBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);\n\n        this.indexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n        this.indexCount = indices.length;\n    }\n\n    generateShelfGeometry(vertices, normals, indices) {\n        // Shelf dimensions\n        const width = 1.0;\n        const height = 1.0;\n        const depth = 0.4;\n        const thickness = 0.05;\n        const shelfCount = 3;\n        const shelfSpacing = (height - thickness) / (shelfCount + 1);\n\n        // Helper function to add a box\n        const addBox = (x, y, z, w, h, d, startIndex) => {\n            const points = [\n                // Front face\n                [-w/2, -h/2, d/2], [w/2, -h/2, d/2], [w/2, h/2, d/2], [-w/2, h/2, d/2],\n                // Back face\n                [-w/2, -h/2, -d/2], [-w/2, h/2, -d/2], [w/2, h/2, -d/2], [w/2, -h/2, -d/2],\n                // Top face\n                [-w/2, h/2, -d/2], [-w/2, h/2, d/2], [w/2, h/2, d/2], [w/2, h/2, -d/2],\n                // Bottom face\n                [-w/2, -h/2, -d/2], [w/2, -h/2, -d/2], [w/2, -h/2, d/2], [-w/2, -h/2, d/2],\n                // Right face\n                [w/2, -h/2, -d/2], [w/2, h/2, -d/2], [w/2, h/2, d/2], [w/2, -h/2, d/2],\n                // Left face\n                [-w/2, -h/2, -d/2], [-w/2, -h/2, d/2], [-w/2, h/2, d/2], [-w/2, h/2, -d/2],\n            ];\n\n            points.forEach(point => {\n                vertices.push(point[0] + x, point[1] + y, point[2] + z);\n            });\n\n            // Add normals\n            const faceNormals = [\n                [0, 0, 1], [0, 0, -1],  // Front, Back\n                [0, 1, 0], [0, -1, 0],  // Top, Bottom\n                [1, 0, 0], [-1, 0, 0],  // Right, Left\n            ];\n\n            faceNormals.forEach(normal => {\n                for (let i = 0; i < 4; i++) {\n                    normals.push(...normal);\n                }\n            });\n\n            // Add indices\n            for (let i = 0; i < 6; i++) {\n                const base = startIndex + i * 4;\n                indices.push(\n                    base, base + 1, base + 2,\n                    base, base + 2, base + 3\n                );\n            }\n\n            return startIndex + 24; // Return next vertex index\n        };\n\n        let vertexIndex = 0;\n\n        // Add back panel\n        vertexIndex = addBox(0, 0, -depth/2, width, height, thickness, vertexIndex);\n\n        // Add shelves\n        for (let i = 0; i < shelfCount; i++) {\n            const shelfY = -height/2 + (i + 1) * shelfSpacing;\n            vertexIndex = addBox(0, shelfY, 0, width, thickness, depth, vertexIndex);\n        }\n\n        // Add side panels\n        vertexIndex = addBox(-width/2, 0, 0, thickness, height, depth, vertexIndex);\n        vertexIndex = addBox(width/2, 0, 0, thickness, height, depth, vertexIndex);\n\n        // Add top and bottom panels\n        vertexIndex = addBox(0, -height/2, 0, width, thickness, depth, vertexIndex);\n        addBox(0, height/2, 0, width, thickness, depth, vertexIndex);\n    }\n\n    setProgram(program, locations) {\n        this.program = program;\n        this.locations = locations;\n    }\n\n    render() {\n        const gl = this.gl;\n        \n        const modelMatrix = mat4.create();\n        mat4.translate(modelMatrix, modelMatrix, this.position);\n        mat4.rotate(modelMatrix, modelMatrix, this.rotation, [0, 1, 0]);\n        mat4.scale(modelMatrix, modelMatrix, this.scale);\n\n        gl.uniformMatrix4fv(this.locations.uniforms.modelMatrix, false, modelMatrix);\n        \n        // Rich wood material color\n        gl.uniform1i(this.locations.uniforms.uUseTexture, 0);\n        gl.uniform4fv(this.locations.uniforms.baseColor, [0.4, 0.2, 0.1, 1.0]);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.vertexAttribPointer(this.locations.attributes.position, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(this.locations.attributes.position);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);\n        gl.vertexAttribPointer(this.locations.attributes.normal, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(this.locations.attributes.normal);\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.drawElements(gl.TRIANGLES, this.indexCount, gl.UNSIGNED_SHORT, 0);\n    }\n}\n\nexport function createBookshelf(gl) {\n    return new Bookshelf(gl);\n}","import { mat4 } from 'gl-matrix';\n\nexport class Floor {\n    constructor(gl) {\n        this.gl = gl;\n        this.position = [0, 0, 0];\n        this.rotation = 0;\n        this.scale = [4, 0.02, 4]; // Wide and thin floor\n        this.initBuffers();\n    }\n\n    initBuffers() {\n        const gl = this.gl;\n        \n        // Simple plane vertices\n        const vertices = [\n            // Top face\n            -1.0, 0.0, -1.0,\n            -1.0, 0.0,  1.0,\n             1.0, 0.0,  1.0,\n             1.0, 0.0, -1.0,\n        ];\n\n        const normals = [\n            // Top face normal\n            0.0, 1.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 1.0, 0.0,\n        ];\n\n        const indices = [\n            0, 1, 2,\n            0, 2, 3,\n        ];\n\n        this.vertexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n        this.normalBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);\n\n        this.indexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n        this.indexCount = indices.length;\n    }\n\n    setProgram(program, locations) {\n        this.program = program;\n        this.locations = locations;\n    }\n\n    render() {\n        const gl = this.gl;\n        \n        const modelMatrix = mat4.create();\n        mat4.translate(modelMatrix, modelMatrix, this.position);\n        mat4.rotate(modelMatrix, modelMatrix, this.rotation, [0, 1, 0]);\n        mat4.scale(modelMatrix, modelMatrix, this.scale);\n\n        gl.uniformMatrix4fv(this.locations.uniforms.modelMatrix, false, modelMatrix);\n        \n        // Marble-like floor color with slight reflection\n        gl.uniform1i(this.locations.uniforms.uUseTexture, 0);\n        gl.uniform4fv(this.locations.uniforms.baseColor, [0.9, 0.9, 0.92, 1.0]);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.vertexAttribPointer(this.locations.attributes.position, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(this.locations.attributes.position);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);\n        gl.vertexAttribPointer(this.locations.attributes.normal, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(this.locations.attributes.normal);\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.drawElements(gl.TRIANGLES, this.indexCount, gl.UNSIGNED_SHORT, 0);\n    }\n}\n\nexport function createFloor(gl) {\n    return new Floor(gl);\n}","import { mat4 } from 'gl-matrix';\nimport { initScene } from './scene.js';\nimport { createPerfumeBottle } from './perfume.js';\nimport { createBookshelf } from './bookshelf.js';\nimport { createFloor } from './floor.js';\n\nlet animationId;\nlet isAnimating = false;\nlet startTime = null;\nconst ANIMATION_DURATION = 5000; // 5 seconds\n\nfunction main() {\n    const canvas = document.querySelector('#glCanvas');\n    const gl = canvas.getContext('webgl', { alpha: false, antialias: true });\n\n    if (!gl) {\n        alert('Unable to initialize WebGL. Your browser may not support it.');\n        return;\n    }\n\n    // Initialize scene with models\n    const scene = initScene(gl);\n    const perfume = createPerfumeBottle(gl);\n    const bookshelf = createBookshelf(gl);\n    const floor = createFloor(gl);\n\n    // Set initial positions\n    perfume.position = [0.5, 0.35, 2]; // Adjusted start position slightly lower\n    bookshelf.position = [0, 0, -2]; // Bookshelf position\n    floor.position = [0, -1, 0]; // Floor position below everything\n\n    // Add models to scene\n    scene.addModel(floor);\n    scene.addModel(bookshelf);\n    scene.addModel(perfume);\n\n    function renderLoop() {\n        scene.render();\n        requestAnimationFrame(renderLoop);\n    }\n\n    // Animation controls\n    const toggleButton = document.getElementById('toggleAnimation');\n    toggleButton.addEventListener('click', () => {\n        isAnimating = !isAnimating;\n        toggleButton.textContent = isAnimating ? 'Stop Animation' : 'Start Animation';\n        \n        if (isAnimating) {\n            startTime = performance.now();\n            updateAnimation(performance.now());\n        }\n    });\n\n    function updateAnimation(currentTime) {\n        if (!startTime) startTime = currentTime;\n        const elapsed = currentTime - startTime;\n        const progress = Math.min(elapsed / ANIMATION_DURATION, 1);\n\n        if (progress < 1) {\n            // Easing function for smooth movement\n            const easeProgress = 1 - Math.pow(1 - progress, 3);\n            \n            // Move perfume bottle to the middle shelf\n            const startZ = 2;\n            const endZ = -2.0; // Move further into the shelf\n            const startY = 0.; // Starting lower\n            const endY = 0.16; // Keep Y position constant for middle shelf\n            \n            const z = startZ - (easeProgress * (startZ - endZ));\n            const y = startY - (easeProgress * (startY - endY));\n            \n            // Maintain x position for proper shelf alignment\n            perfume.position[0] = 0.5;\n            perfume.position[1] = y;\n            perfume.position[2] = z;\n            \n            // Smooth rotation during movement\n            perfume.rotation = easeProgress * Math.PI * 2;\n\n            if (isAnimating) {\n                requestAnimationFrame(updateAnimation);\n            }\n        } else {\n            isAnimating = false;\n            toggleButton.textContent = 'Start Animation';\n            // Ensure final position is exact\n            perfume.position = [0.5, 0.16, -2.0];\n            perfume.rotation = Math.PI * 2;\n        }\n    }\n\n    // Start continuous render loop\n    renderLoop();\n}\n\n// Start the application\nmain();"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","Math","random","PI","create","out","glMatrix","length","a","x","y","z","hypot","fromValues","subtract","b","i","arguments","sqrt","vec","translate","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","scale","rotate","rad","axis","s","c","t","b00","b01","b02","b10","b11","b12","b20","b21","b22","len","sin","cos","perspective","fovy","aspect","near","far","nf","f","tan","Infinity","createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","Scene","constructor","this","models","camera","position","vec3","target","up","rotation","mouseDown","lastMousePos","setupGL","initShaders","setupMouseControls","canvas","addEventListener","e","preventDefault","clientX","clientY","window","deltaX","deltaY","max","min","updateCameraPosition","zoom","direction","newDistance","radius","enable","DEPTH_TEST","CULL_FACE","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","resizeCanvas","displayWidth","clientWidth","displayHeight","clientHeight","width","height","viewport","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","locations","attributes","getAttribLocation","normal","texCoord","uniforms","modelMatrix","getUniformLocation","viewMatrix","projMatrix","lightPos","viewPos","baseColor","uTexture","uUseTexture","addModel","model","setProgram","push","render","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","mat4","eye","center","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","identity","useProgram","uniformMatrix4fv","uniform3fv","forEach","PerfumeBottle","initBuffers","vertices","normals","indices","generateBottleGeometry","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","normalBuffer","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","indexCount","profile","theta","sinTheta","cosTheta","j","nx","nz","ny","current","next","uniform1i","uniform4fv","vertexAttribPointer","FLOAT","enableVertexAttribArray","drawElements","TRIANGLES","UNSIGNED_SHORT","Bookshelf","generateShelfGeometry","depth","thickness","addBox","w","h","d","startIndex","point","base","vertexIndex","Floor","isAnimating","startTime","document","querySelector","getContext","alpha","antialias","alert","scene","initScene","perfume","createPerfumeBottle","bookshelf","createBookshelf","floor","createFloor","toggleButton","getElementById","updateAnimation","currentTime","elapsed","progress","easeProgress","pow","startZ","startY","requestAnimationFrame","textContent","performance","now","renderLoop","main"],"sourceRoot":""}